version: 2
jobs:
  build:
    docker:
      - image: circleci/node:carbon

    working_directory: ~/devportal

    steps:
      - checkout

      - run: yarn install

      - run:
          name: Build client
          command: |
            if [[ ((`echo $CIRCLE_BRANCH | grep -c "master"` > 0))]]; then
              yarn build
            elif [[ ((`echo $CIRCLE_BRANCH | grep -c "staging"` > 0)) ]]; then
              yarn run build:staging
            fi

      - persist_to_workspace:
          root: ./
          paths:
            - ./public
  build_image:
    docker:
      - image: circleci/node:carbon

    working_directory: ~/devportal

    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
      - run:
          name: Build and push image
          command: |
            if [[ ((`echo $CIRCLE_BRANCH | grep -c "master"` > 0)) || ((`echo $CIRCLE_BRANCH | grep -c "staging"` > 0)) ]]; then
              export DEPLOY_BRANCH=${CIRCLE_BRANCH}
              ./deploy/build.sh
            else
              echo "Skip Docker push image since it is not the master or staging branch"
            fi

  deploy:
    docker:
      - image: mrfoh/azurecli-helm

    working_directory: ~/devportal

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Deploy to AKS
          command: |
            if [[ ((`echo $CIRCLE_BRANCH | grep -c "master"` > 0))]]; then
              echo "Deploying to production"
              export DEPLOY_TARGET=production
              ./deploy/cluster-deploy.sh
            elif [[ ((`echo $CIRCLE_BRANCH | grep -c "staging"` > 0)) ]]; then
              echo "Deploying to staging"
              export DEPLOY_TARGET=staging
              ./deploy/cluster-deploy.sh
            else
              echo "Nothing to deploy"
            fi

workflows:
  version: 2
  deploy:
    jobs:
      - build
      - build_image:
          requires:
            - build
      - deploy:
          requires:
            - build_image
